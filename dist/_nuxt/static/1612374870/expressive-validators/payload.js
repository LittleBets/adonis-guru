__NUXT_JSONP__("/expressive-validators", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y){return {data:[{doc:{slug:v,description:"Adonis has some expressive validators.",title:"Expressive Validators",image:"",tags:"snippets",author:"Ashok",toc:[],body:{type:"root",children:[{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-typescript","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"public"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"async"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"updatePost"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:" auth"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:" user "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:" params"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F Use Case: A user can update either both the title and the description"}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F or only one of the fields. However, the title should remain unique"}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F **for the user** in either case."}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"const"}]},{type:a,value:" postSchema "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"="}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        description"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:" scema"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"\n        title"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            rules"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"unique"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n                table"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"'posts'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"\n                column"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"'title'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F  ðŸ‘‡ make sure the title is unique among user's posts ..."}]},{type:a,value:"\n                where"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:" author_id"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:" user"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"?."}]},{type:a,value:"id "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F  ðŸ‘‡ ... but ignore the check for the post being updated"}]},{type:a,value:"\n                whereNot"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"\n            "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"\n        "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"await"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"validate"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"create"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"postSchema"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:s},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F ..."}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:o}]}]}]},{type:a,value:o},{type:b,tag:"p",props:{},children:[{type:a,value:"Some information here"}]}]},dir:"\u002Fsnippets",path:"\u002Fsnippets\u002Fexpressive-validators",extension:".md",createdAt:"2021-02-03T02:06:19.915Z",updatedAt:"2021-02-03T17:08:36.081Z",bodyPlainText:"\npublic async updatePost({ request, auth: { user }, params: { id } }) {\n\u002F\u002F Use Case: A user can update either both the title and the description\n\u002F\u002F or only one of the fields. However, the title should remain unique\n\u002F\u002F for the user in either case.\n    const postSchema = {\n        description: scema.string(),\n        title: schema.string({}, {\n            rules.unique ({\n                table: 'posts',\n                column: 'title',\n                \u002F\u002F  ðŸ‘‡ make sure the title is unique among user's posts ...\n                where: { author_id: user?.id },\n                \u002F\u002F  ðŸ‘‡ ... but ignore the check for the post being updated\n                whereNot: { id },\n            }),\n        }),\n    }\n    await request.validate ({ schema: schema.create(postSchema) })\n    \u002F\u002F ...\n}\nSome information here\n"},currentPage:v}],fetch:[],mutations:void 0}}("text","element","span","token","punctuation"," ","operator","{","}",",",":","function","(",")","\n","comment",".","keyword","\n    ","string"," schema","expressive-validators"," request"," id ","\n                ")));