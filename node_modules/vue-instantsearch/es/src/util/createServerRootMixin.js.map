{"version":3,"file":"createServerRootMixin.js","sources":["../../../src/util/createServerRootMixin.js"],"sourcesContent":["import Vue from 'vue';\nimport instantsearch from 'instantsearch.js/es';\nimport algoliaHelper from 'algoliasearch-helper';\nconst { SearchResults, SearchParameters } = algoliaHelper;\nimport { warn } from './warn';\n\nfunction walkIndex(indexWidget, visit) {\n  visit(indexWidget);\n\n  return indexWidget.getWidgets().forEach(widget => {\n    if (widget.$$type !== 'ais.index') return;\n    visit(widget);\n    walkIndex(widget, visit);\n  });\n}\n\nfunction renderToString(app, _renderToString) {\n  return new Promise((resolve, reject) =>\n    _renderToString(app, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    })\n  );\n}\n\nfunction searchOnlyWithDerivedHelpers(helper) {\n  return new Promise((resolve, reject) => {\n    helper.searchOnlyWithDerivedHelpers();\n\n    // we assume all derived helpers resolve at least in the same tick\n    helper.derivedHelpers[0].on('result', () => {\n      resolve();\n    });\n\n    helper.derivedHelpers.forEach(derivedHelper =>\n      derivedHelper.on('error', e => {\n        reject(e);\n      })\n    );\n  });\n}\n\nfunction augmentInstantSearch(instantSearchOptions, searchClient, indexName) {\n  /* eslint-disable no-param-reassign */\n\n  const helper = algoliaHelper(searchClient, indexName);\n  const search = instantsearch(instantSearchOptions);\n\n  let resultsState;\n\n  /**\n   * main API for SSR, called in serverPrefetch of a root component which contains instantsearch\n   * @param {object} componentInstance the calling component's `this`\n   * @returns {Promise} result of the search, to save for .hydrate\n   */\n  search.findResultsState = function(componentInstance) {\n    let _renderToString;\n    try {\n      _renderToString = require('vue-server-renderer/basic');\n    } catch (e) {\n      // error is handled by regular if, in case it's `undefined`\n    }\n    if (!_renderToString) {\n      throw new Error('you need to install vue-server-renderer');\n    }\n\n    let app;\n\n    return Promise.resolve()\n      .then(() => {\n        const options = {\n          serverPrefetch: undefined,\n          fetch: undefined,\n          _base: undefined,\n          name: 'ais-ssr-root-component',\n          // copy over global Vue APIs\n          router: componentInstance.$router,\n          store: componentInstance.$store,\n        };\n\n        const Extended = componentInstance.$vnode\n          ? componentInstance.$vnode.componentOptions.Ctor.extend(options)\n          : Vue.component(\n              Object.assign({}, componentInstance.$options, options)\n            );\n\n        app = new Extended({\n          propsData: componentInstance.$options.propsData,\n        });\n\n        // https://stackoverflow.com/a/48195006/3185307\n        app.$slots = componentInstance.$slots;\n\n        app.$root = componentInstance.$root;\n\n        app.$options.serverPrefetch = [];\n\n        app.instantsearch.helper = helper;\n        app.instantsearch.mainHelper = helper;\n\n        app.instantsearch.mainIndex.init({\n          instantSearchInstance: app.instantsearch,\n          parent: null,\n          uiState: app.instantsearch._initialUiState,\n        });\n      })\n      .then(() => renderToString(app, _renderToString))\n      .then(() => searchOnlyWithDerivedHelpers(helper))\n      .then(() => {\n        const results = {};\n        walkIndex(app.instantsearch.mainIndex, widget => {\n          results[widget.getIndexId()] = widget.getResults();\n        });\n\n        search.hydrate(results);\n\n        resultsState = Object.keys(results)\n          .map(indexId => {\n            const { _state, _rawResults } = results[indexId];\n            return [\n              indexId,\n              {\n                // copy just the values of SearchParameters, not the functions\n                _state: Object.keys(_state).reduce((acc, key) => {\n                  acc[key] = _state[key];\n                  return acc;\n                }, {}),\n                _rawResults,\n              },\n            ];\n          })\n          .reduce(\n            (acc, [key, val]) => {\n              acc[key] = val;\n              return acc;\n            },\n            {\n              __identifier: 'stringified',\n            }\n          );\n        return search.getState();\n      });\n  };\n\n  /**\n   * @returns {Promise} result state to serialize and enter into .hydrate\n   */\n  search.getState = function() {\n    if (!resultsState) {\n      throw new Error('You need to wait for findResultsState to finish');\n    }\n    return resultsState;\n  };\n\n  /**\n   * make sure correct data is available in each widget's state.\n   * called in widget mixin with (this.widget, this)\n   *\n   * @param {object} widget The widget instance\n   * @param {object} parent The local parent index\n   * @returns {void}\n   */\n  search.__forceRender = function(widget, parent) {\n    const localHelper = parent.getHelper();\n\n    const results = search.__initialSearchResults[parent.getIndexId()];\n\n    // this happens when a different InstantSearch gets rendered initially,\n    // after the hydrate finished. There's thus no initial results available.\n    if (!results) {\n      return;\n    }\n\n    const state = results._state;\n\n    // helper gets created in init, but that means it doesn't get the injected\n    // parameters, because those are from the lastResults\n    localHelper.state = state;\n\n    // TODO: copied from index widget, since it's only accessible once sent to render()\n    // a possible solution is making createURL accessible from the index widget.\n    const createURL = nextState =>\n      search._createURL({\n        [parent.getIndexId()]: parent\n          .getWidgets()\n          .filter(w => w.$$type !== 'ais.index')\n          .reduce((uiState, w) => {\n            if (!w.getWidgetState) {\n              return uiState;\n            }\n\n            return w.getWidgetState(uiState, {\n              searchParameters: nextState,\n              helper: localHelper,\n            });\n          }, {}),\n      });\n\n    function resolveScopedResultsFromWidgets(widgets) {\n      const indexWidgets = widgets.filter(w => w.$$type === 'ais.index');\n\n      return indexWidgets.reduce(\n        (scopedResults, current) =>\n          scopedResults.concat(\n            {\n              indexId: current.getIndexId(),\n              results: search.__initialSearchResults[current.getIndexId()],\n              helper: current.getHelper(),\n            },\n            ...resolveScopedResultsFromWidgets(current.getWidgets())\n          ),\n        []\n      );\n    }\n\n    widget.render({\n      helper: localHelper,\n      results,\n      scopedResults: resolveScopedResultsFromWidgets([parent]),\n      state,\n      templatesConfig: {},\n      createURL,\n      instantSearchInstance: search,\n      searchMetadata: {\n        isSearchStalled: false,\n      },\n    });\n  };\n\n  /**\n   * Called both in server\n   * @param {object} results a map of indexId: SearchResults\n   * @returns {void}\n   */\n  search.hydrate = function(results) {\n    if (!results) {\n      warn(\n        'The result of `findResultsState()` needs to be passed to `hydrate()`.'\n      );\n      return;\n    }\n\n    const initialResults =\n      results.__identifier === 'stringified'\n        ? Object.keys(results).reduce((acc, indexId) => {\n            if (indexId === '__identifier') {\n              return acc;\n            }\n            acc[indexId] = new SearchResults(\n              new SearchParameters(results[indexId]._state),\n              results[indexId]._rawResults\n            );\n            return acc;\n          }, {})\n        : results;\n\n    search.__initialSearchResults = initialResults;\n\n    search.helper = helper;\n    search.mainHelper = helper;\n\n    search.mainIndex.init({\n      instantSearchInstance: search,\n      parent: null,\n      uiState: search._initialUiState,\n    });\n  };\n\n  /* eslint-enable no-param-reassign */\n  return search;\n}\n\nexport function createServerRootMixin(instantSearchOptions = {}) {\n  const { searchClient, indexName } = instantSearchOptions;\n\n  if (!searchClient || !indexName) {\n    throw new Error(\n      'createServerRootMixin requires `searchClient` and `indexName` in the first argument'\n    );\n  }\n\n  const search = augmentInstantSearch(\n    instantSearchOptions,\n    searchClient,\n    indexName\n  );\n\n  // put this in the user's root Vue instance\n  // we can then reuse that InstantSearch instance seamlessly from `ais-instant-search-ssr`\n  const rootMixin = {\n    provide() {\n      return {\n        $_ais_ssrInstantSearchInstance: this.instantsearch,\n      };\n    },\n    data() {\n      return {\n        // this is in data, so that the real & duplicated render do not share\n        // the same instantsearch instance.\n        instantsearch: search,\n      };\n    },\n  };\n\n  return rootMixin;\n}\n"],"names":["augmentInstantSearch","instantSearchOptions","searchClient","indexName","const","resultsState","helper","algoliaHelper","search","instantsearch","findResultsState","componentInstance","let","_renderToString","app","require","e","Error","Promise","resolve","then","options","serverPrefetch","undefined","fetch","_base","name","router","$router","store","$store","Extended","$vnode","componentOptions","Ctor","extend","Vue","component","Object","assign","$options","propsData","$slots","$root","mainHelper","mainIndex","init","instantSearchInstance","parent","uiState","_initialUiState","reject","err","res","renderToString","searchOnlyWithDerivedHelpers","derivedHelpers","on","forEach","derivedHelper","results","walkIndex","indexWidget","visit","getWidgets","widget","$$type","getIndexId","getResults","hydrate","keys","map","indexId","_state","reduce","acc","key","_rawResults","ref","val","__identifier","getState","__forceRender","localHelper","getHelper","__initialSearchResults","state","render","scopedResults","resolveScopedResultsFromWidgets","widgets","filter","w","current","concat","templatesConfig","nextState","_createURL","getWidgetState","searchParameters","searchMetadata","isSearchStalled","initialResults","SearchResults","SearchParameters","warn","createServerRootMixin","provide","$_ais_ssrInstantSearchInstance","this","data"],"mappings":"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"}